#summary 详细设计文档模板
#labels Phase-Design

= 摘要 =

本文是一个系统详细设计文档模板，使用本框架进行开发时，推荐遵循以下的过程！

= 设计模块 =

== Web 服务层设计 ==

基于本框架开发的应用系统将完全采用 Web Service 架构，系统对外公开的所有功能均是以 RESTful Web Service 的形式暴露，这样在保证传输协议确定的前提下，后端服务器可以完全与前端系统解耦合，无论是基于 Ajax 的 Web 2.0 应用、或是基于手持设备的移动应用、抑或与其它系统的同步接口等，都可以使用同一套后端代码，完美支持。

Web 服务层的设计主要从如下几个角度出发：

 * 确定业务需求
 * 将业务需求转化为系统中的功能点
 * 确定菜单项，以及每个页面中的具体操作
 * 确定每个操作访问后台时的 URL

== 传输协议设计 ==

为了保证前后端联调的时候能够正常工作，需要提前将前后端系统通讯的协议确定下来。影响这些协议确定的因素包括很多，但主要由业务功能、前端控件约束等决定。

前端传递给后端的数据主要以 www-form-encoded 格式传输，偶尔会采用 JSON 等其它格式；后端传递给前端的数据，主要以 application/json 格式传输。

传输协议确定下来之后，就要根据传输协议写出对应的 VO，VO 可以是 POJO，也可以是 Freemarker 模板转换而来的 JSON 文本。

== 引擎层设计 ==

如果有需要使用工作流引擎、规则引擎、生成报表等操作的，就需要引入引擎层，如果只是针对数据的 CRUD 操作，则无须引入该层设计。

引擎层中的方法，应该和流程、规则或报表中的实际操作相关，并通过 API 调用相应的引擎，但是不应该直接进行数据读写操作，如果有需要就直接调用数据访问层的方法。

== 数据访问层设计 ==

所有对数据库的 CRUD 或其它更复杂的操作都放在该层中进行，该层应该只操作业务实体对象和数据库，不应该访问其它任何接口。

== 实体设计 ==

领域模型转换而来的实体，如果不是通过 Hibernate 等实体关系映射组件进行开发，可以替换为数据库设计和相关的存储过程的设计。

= 系统 =

== 系统调用过程 ==

 * 根据定义好的传输协议，前端将数据通过 URL 发送给后端服务；
 * Web Service 层接收到数据后（无需组装数据，CXF 框架已经提供），应对数据进行有效性和正确定验证，验证通过的就交给引擎层或数据访问层进行处理。*注意：切不可在 Web Service 层直接访问数据库*；
 * 引擎层负责调用工作流、规则引擎的 API 来调用相关组件，或进行报表数据的统计计算（除非需要大量的聚合与连接表的操作，否则不建议将统计过程放到存储过程中），如果在此时需要访问数据库，就直接调用数据访问层中的方法。*同样注意：不可以在此层中直接访问数据库*；
 * 数据访问层负责访问数据库，并组装为业务实体。*不可以在这里将实体处理为 VO *；
 * 从数据访问层返回引擎层，对业务实体继续进行加工；
 * 从引擎层返回 Web Service 层，将返回的业务实体组装为 VO；
 * 返回数据到前端。